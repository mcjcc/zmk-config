/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE        0
#define CMK_DH      1
#define NAV         2
#define NUM         3
#define SYM         4
#define FUN         5
#define MEDIA       6

&lt { // layer-tap
  tapping-term-ms = <200>;
  quick-tap-ms = <200>;
  flavor = "hold-preferred";
};

&sk { // sticky key
  release-after-ms = <500>;
  quick-release;
};

/ {
  behaviors { 
    tdLGUI: tap_dance_LGUI {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LGUI";
      #binding-cells = <0>;
      tapping-term-ms = <300>;
      bindings = <&kp LGUI>, <&kp LS(LGUI)>;
    };
  };

  combos {
    compatible = "zmk,combos";   

    toggle_cmk_dh {
      timeout-ms = <50>;
      key-positions=<0 1 8 9>;
      bindings=<&tog CMK_DH>;
    };

    fn_layer { 
      timeout-ms = <50>;
      key-positions=<30 31>;
      bindings=<&mo FUN>;
    }; 
    
    media_layer {
      timeout-ms = <50>;
      key-positions=<31 32>; 
      bindings=<&mo MEDIA>;
    };
    
    left_bspc {
      timeout-ms = <50>;
      key-positions=<0 10>;
      bindings=<&kp BSPC>;
    };

    lbkt {
      timeout-ms = <50>;
      key-positions=<1 11>; 
      bindings=<&kp LBKT>;
    };

    rbkt {
      timeout-ms = <50>;
      key-positions=<2 12>; 
      bindings=<&kp RBKT>;
    };

    tab {
      timeout-ms = <50>;
      key-positions=<3 13>;
      bindings=<&kp TAB>;
    };

    left {
      timeout-ms = <50>;
      key-positions=<11 21>; 
      bindings=<&kp LEFT>;
    };

    up {
      timeout-ms = <50>;
      key-positions=<12 22>; 
      bindings=<&kp UP>;
    };

    down {
      timeout-ms = <50>;
      key-positions=<13 23>; 
      bindings=<&kp DOWN>;
    };

    right {
      timeout-ms = <50>;
      key-positions=<14 24>; 
      bindings=<&kp RIGHT>;
    };

    caps { 
      timeout-ms = <50>;
      key-positions=<5 6>;
      bindings=<&kp CAPS>;
    };

    space { 
      timeout-ms = <50>;
      key-positions=<24 32>;
      bindings=<&kp SPACE>;
    };

    bpsc {
      timeout-ms = <50>;
      key-positions=<9 19>;
      bindings=<&kp BSPC>;
      };  

    semi_colon {
      timeout-ms = <50>;
      key-positions=<19 32>;
      bindings=<&kp SEMI>;
    };

    colon  {
      timeout-ms = <50>;
      key-positions=<10 19 32>;
      bindings=<&kp COLON>;
    };
  
    // modifiers
    l_shift {
      timeout-ms = <75>;
      key-positions = <20 21>;
      bindings = <&sk LSHFT>;
    };

    l_ctrl {
      timeout-ms = <50>;
      key-positions = <21 22>;
      bindings = <&sk LCTRL>;
    };

    l_gui {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&sk LGUI>;
    };

    l_alt {
      timeout-ms = <50>;
      key-positions = <23 24>;
      bindings = <&sk LALT>;
    };

    l_shift_pinky {
      timeout-ms = <75>;
      key-positions=<10 20>;
      bindings=<&kp LSHFT>;
    };

    r_gui_thumb {
      timeout-ms = <50>;
      key-positions = <33 34>;
      bindings = <&kp RGUI>;
    };

    r_shift_pinky {
      timeout-ms = <75>;
      key-positions=<19 29>;
      bindings=<&sk RSHFT>;
    };

    r_alt {
      timeout-ms = <50>;
      key-positions = <25 26>;
      bindings = <&sk RALT>;
    };

    r_gui {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&sk RGUI>;
    };

    r_ctrl {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&sk RCTRL>;
    };

    r_shift {
      timeout-ms = <75>;
      key-positions = <28 29>;
      bindings = <&sk RSHFT>;
    };
    
  };

    keymap {
      compatible = "zmk,keymap";

      default_layer {
        bindings = <
                      &kp Q &kp W &kp E &kp R &kp T          &kp Y &kp U &kp I &kp O &kp P             
                      &kp A &kp S &kp D &kp F &kp G          &kp H &kp J &kp K &kp L &kp SQT      
                      &kp Z &kp X &kp C &kp V &kp B          &kp N &kp M &kp COMMA &kp DOT &kp SLASH  
                    &lt NUM ESC &tdLGUI &lt NAV RET         &kp SPACE &kp BSPC &mt RSHIFT TAB 
        >;
                                
        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
      };

      colemak_dh_layer {
        bindings = <
                      &kp Q &kp W &kp F &kp P &kp B          &kp J &kp L &kp U &kp Y &kp SQT             
                      &kp A &kp R &kp S &kp T &kp G          &kp M &kp N &kp E &kp I &kp O      
                      &kp Z &kp X &kp C &kp D &kp V          &kp K &kp H &kp COMMA &kp DOT &kp SLASH  
                    &lt NUM ESC &tdLGUI &lt NAV RET         &kp SPACE &kp BSPC &mt RSHIFT TAB 
        >;
                                
        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
      };

   nav_layer { 
            bindings = <
                      &kp N1 &kp N2 &kp N3 &kp N4 &kp N5           &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 
              &kp TAB &kp LEFT &kp UP &kp DOWN &kp RIGHT           &kp LBKT &kp DOWN &kp UP &kp RBKT &kp SEMI
      &kp LSHIFT &kp GRAVE &kp PG_UP &kp PG_DN &kp SPACE           &kp MINUS &kp EQUAL &kp COMMA &kp DOT &kp RSHIFT 
                                    &kp ESC &tdLGUI &none          &kp SPACE &kp DEL &kp RALT 
        >;      
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>; 
      }; 

    num_layer {
                bindings = <
                    &kp N1 &kp N2 &kp N3 &kp N4 &kp N5           &kp FSLH &kp N7 &kp N8 &kp N9 &kp MINUS 
                    &kp N6 &kp N7 &kp N8 &kp N9 &kp N0           &kp ASTRK &kp N4 &kp N5 &kp N6 &kp PLUS 
          &sk LSHFT &sk LCTRL &sk LGUI &sk LALT &kp EQUAL            &kp BSLH &kp N1 &kp N2 &kp N3 &kp RET 
                                    &none &none &none           &kp N0 &kp N0 &kp DOT 
                >;

        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;

    };
    sym_layer {
                bindings = <
        &kp LBRC &kp AMPS &kp ASTRK &kp UNDER &kp RBRC          &none &none &none &none &none   
      &kp COLON &kp DLLR &kp PRCNT &kp CARET &kp PLUS          &none &sk RALT &sk RGUI &sk RCTRL &sk RSHFT 
          &kp TILDE &kp EXCL &kp AT &kp HASH &kp PIPE          &none &none &none &none &none 
                                    &none &none &none          &none &none &none              
                >;

        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        
    };

    fun_layer{
              bindings = <
                &kp F12 &kp F7 &kp F8 &kp F9 &none          &none &none &none &none &none  
              &kp F11 &kp F4 &kp F5 &kp F6 &kp SLCK          &none &sk RALT &sk RGUI &sk RCTRL &sk RSHFT 
      &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK          &none &none &none &none &none 
                        &kp K_APP &kp SPACE &kp RET          &none &none &none  
            >;

    sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };


    media_layer {
            bindings = <
                      &kp C_MUTE &kp LG(MINUS) &kp LG(EQUAL) &kp C_PREV &kp C_NEXT         &none &kp C_BRI_DN &kp C_BRI_UP &out OUT_USB &out OUT_BLE 
            &kp LG(N0) &kp C_VOL_DN &kp C_VOL_UP &kp LG(LS(LBKT)) &kp LG(LS(RBKT))          &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
                    &kp LSHIFT &kp C_BRI_DN &kp C_BRI_UP &kp LG(LEFT) &kp LG(RIGHT)          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR  
                                                                  &none &none &none          &kp C_STOP &kp C_PP &kp C_MUTE              
            >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };
  }; 
};  


